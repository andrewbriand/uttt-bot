use crate::bitboard::BitBoard;
use crate::ai::AI;
use std::thread;
use std::time::{Duration, Instant};
fn popcnt(x16: u16) -> u8 {
    return x16.count_ones() as u8;
    let mut x = (x16 & 0xFF) as u8;
    x = (x & 0x55) + (x >> 1 & 0x55);
    x = (x & 0x33) + (x >> 2 & 0x33);
    x = (x & 0x0f) + (x >> 4 & 0x0f);
    x += (x16 >> 8) as u8;
    return x;
}
static PARTIAL_CREDIT: [u64; 4096] = [
0xfffffffffffffff8,
0xfffffffffffffffa,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffffa,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffcc,
0xffffffffffffffff,
0xffffffffffffffaa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffffaa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xfffffffffefef8f8,
0xfffffffffffff8f8,
0xfffffffffbfbfcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffcfcf0f0,
0xfffffffffffff0f0,
0xfffffffff3f3fcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffffff0f0,
0xfffffffffafaf0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffffffffff,
0xffffffffddddaaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0xffffffffffffffff,
0xffffffffcccc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffffffffff,
0x5555aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5555aaaa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffaf8faf8,
0xfffffffffdfafdfa,
0xfffffffffaf8faf8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffaf0faf0,
0xfffffffff5faf5fa,
0xfffffffffaf0faf0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffefeea68,
0xffffffffffeffdfa,
0xfffffffffbfbeeec,
0xffffffffffffffff,
0xfffffffffffdeaea,
0xffffffffffffffff,
0xffffffffffffffff,
0x7ffffffe,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0xffffffffffffffff,
0xfffffffffcfc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3f3ffcfc,
0xfffffffffafaaa00,
0xffffffffffaff5fa,
0xfffffffffafaaa00,
0xffffffffffffffff,
0xfffffffffff5aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5ffffffa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xffffffffffffffff,
0xfffffffff0f00000,
0xffffffffffffffff,
0xffffffffffffffff,
0xf0ff0f0,
0xffffffffeeeeaa00,
0xffffffffffee55aa,
0xffffffffbbbbeecc,
0xffffffffffffffff,
0xffffffffffddaaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x77ffffee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0xffffffffffffffff,
0xffffffffcccc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3333cccc,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffaaaaaa00,
0xffffffffffffffff,
0xffffffffff55aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x55ffffaa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffefe6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0xffffffffffffffff,
0xfffffffffdfdeaea,
0xffffffffffffffff,
0xffffffffffffffff,
0x7f7ffefe,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0xffffffffffffffff,
0xfffffffffcfc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3f3ffcfc,
0xfffffffffafa0000,
0xffffffffafaff0f0,
0xfffffffffafa0000,
0xffffffffffffffff,
0xfffffffff5f5aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5f5ffafa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xffffffffffffffff,
0xfffffffff0f00000,
0xffffffffffffffff,
0xffffffffffffffff,
0xf0ff0f0,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffffffffff,
0xffffffffddddaaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0xffffffffffffffff,
0xffffffffcccc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffffffffff,
0x5555aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5555aaaa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0xffffffffffffffff,
0xffffffffea68ea68,
0xffffffffffffffff,
0xffffffffffffffff,
0x7dea7dea,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x68686868,
0x68686868,
0x68686868,
0xffffffffffffffff,
0x68686868,
0xffffffffffffffff,
0xffffffffffffffff,
0x68686868,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xfffffffffffffffc,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffffc,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffee,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffefef8f8,
0xfffffffffefef8f8,
0xfffffffffbfbfcfc,
0xfffffffffbfbfcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffcfcf0f0,
0xfffffffffcfcf0f0,
0xfffffffff3f3fcfc,
0xfffffffff3f3fcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffbbbbcccc,
0xffffffffddddaaaa,
0xffffffffddddaaaa,
0x7777eeee,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee6868,
0xffffffffeeee6868,
0xfffffffffbfbecec,
0xfffffffffbfbecec,
0xfffffffffdfdeaea,
0xfffffffffdfdeaea,
0x7f7feeee,
0x7f7feeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffbbbbcccc,
0xffffffffddddaaaa,
0xffffffffddddaaaa,
0x7777eeee,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee6868,
0xffffffffeeee6868,
0xfffffffffbfbecec,
0xfffffffffbfbecec,
0xfffffffffdfdeaea,
0xfffffffffdfdeaea,
0x7f7feeee,
0x7f7feeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffbbbbcccc,
0xffffffffddddaaaa,
0xffffffffddddaaaa,
0x7777eeee,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffffffff8,
0xfffffffffffffffa,
0xfffffffffffffff8,
0xfffffffffffffffa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffffa,
0xfffffffffffffff0,
0xfffffffffffffffa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffafaf8f8,
0xfffffffffffff8f8,
0xfffffffffafaf8f8,
0xfffffffffffff8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffffff0f0,
0xfffffffffafaf0f0,
0xfffffffffffff0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffaf8faf8,
0xfffffffffdfafdfa,
0xfffffffffaf8faf8,
0xfffffffffdfafdfa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffaf0faf0,
0xfffffffff5faf5fa,
0xfffffffffaf0faf0,
0xfffffffff5faf5fa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffafaea68,
0xffffffffffeffdfa,
0xfffffffffafaea68,
0xffffffffffeffdfa,
0xfffffffffffdeaea,
0x7ffffffa,
0xfffffffffffdeaea,
0x7ffffffa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffffafaaa00,
0xffffffffffaff5fa,
0xfffffffffafaaa00,
0xffffffffffaff5fa,
0xfffffffffff5aaaa,
0x5ffffffa,
0xfffffffffff5aaaa,
0x5ffffffa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffff55aaaa,
0x55ffffaa,
0xffffffffff55aaaa,
0x55ffffaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffff55aaaa,
0x55ffffaa,
0xffffffffff55aaaa,
0x55ffffaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffafa6868,
0xffffffffefeff8f8,
0xfffffffffafa6868,
0xffffffffefeff8f8,
0xfffffffffdfdeaea,
0x7f7ffafa,
0xfffffffffdfdeaea,
0x7f7ffafa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffffafa0000,
0xffffffffafaff0f0,
0xfffffffffafa0000,
0xffffffffafaff0f0,
0xfffffffff5f5aaaa,
0x5f5ffafa,
0xfffffffff5f5aaaa,
0x5f5ffafa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffafaf8f8,
0xfffffffffafaf8f8,
0xfffffffffafaf8f8,
0xfffffffffafaf8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffffec,
0xfffffffffffffffe,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffffec,
0xfffffffffffffffe,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffffcc,
0xfffffffffffffffc,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffffcc,
0xfffffffffffffffc,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffcc,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffcc,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffefcea68,
0xffffffffffeffdfa,
0xfffffffffbfbeeec,
0x7ffffdfe,
0xfffffffffefcea68,
0xffffffffffeffdfa,
0xfffffffffbfbeeec,
0x7ffffdfe,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffeeccaa00,
0xffffffffddee55aa,
0xffffffffbb33eecc,
0x77bbddee,
0xffffffffeeccaa00,
0xffffffffddee55aa,
0xffffffffbb33eecc,
0x77bbddee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffffec,
0xffffffffffffffec,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffffec,
0xffffffffffffffec,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
];

pub struct SimpleSearchAI {
    board: BitBoard,
   // eval: Box<&'static dyn Fn(&mut BitBoard, i8, usize) -> i32>,
    depth: usize,
    me: i8,
    move_num: u8,
}

impl AI for SimpleSearchAI {
    fn make_move(&mut self, m: i64) {
        if m != -1 {
            self.move_num += 1;
            self.board.make_move(1 << m);
        }
    }

    fn get_move(&mut self, x_time: Duration, o_time: Duration) -> i64 {
        if (self.board.o_occupancy == 0 && self.board.x_occupancy == 0) {
            self.board.make_move(1 << 40);
            return 40;
        }
        /*if (self.move_num > 30) {
            self.depth = 8;
        }*/
        if (self.move_num > 25) {
         //   self.depth = 8;
        }
        self.me = self.board.to_move;
        let mut result_move = -1;
        let mut result_score = -1;
        let mut total_time = Duration::from_millis(200);
        let mut next_depth_estimate: Duration = Duration::from_millis(0);
        let mut depth = 5;
        let mut before_score = -100000;
        while next_depth_estimate < total_time {
            depth += 1;
            let alpha = -100000000;
            let beta = 100000000;
            let before = Instant::now();
            //let quiet = false;
           let quiet = next_depth_estimate*2 > total_time;
            let (next_result_move, next_result_score) = self.parallel_search(&mut self.board.clone(), depth, alpha, beta, quiet);
            //let (next_result_move, next_result_score) = SimpleSearchAI::search(&mut self.board.clone(), depth, alpha, beta, 0, quiet);
            let search_time = Instant::now() - before;
            next_depth_estimate = Duration::from_millis(search_time.as_millis() as u64 * search_time.as_millis() as u64);
            result_move = next_result_move;
            result_score = next_result_score;
            //eprintln!("eval: {}", result_score);
            //eprintln!("depth: {}, quiet: {}", depth, quiet);
            if quiet {
                break;
            }
            if before_score == result_score {
                break;
            }
            before_score = result_score;
            if next_result_score > 49000 || next_result_score < -49000 {
                break;
            }
            if search_time < total_time {
              total_time -= search_time;
            } else {
                break;
            }
        }
        self.move_num += 1;
        self.board.make_move(1 << result_move);
        return result_move;
    }

    fn cleanup(&mut self) {}
}

impl SimpleSearchAI {
    pub fn new<'a>(_eval: Box<dyn Fn(&mut BitBoard, i8, usize) -> i32>, _depth: usize) 
        -> SimpleSearchAI {
        SimpleSearchAI {
            board: BitBoard::new(),
            //eval: _eval,
            depth: _depth,
            me: 0,
            move_num: 0,
        }
    }

    pub fn parallel_search(&self, board: &mut BitBoard, depth: usize, _alpha: i32, beta: i32, quiet: bool) -> (i64, i32) {
        let mut result_move = -1;
        let mut thread_vec = Vec::new();
        let mut move_vec = Vec::new();
        let mut moves = board.get_moves();
        let mut alpha = _alpha;
        let mut move_sequential = 0;
        BitBoard::iterate_moves(moves, &mut |next_move: u128, next_move_sf: i64| {
            if move_sequential > 4 {
                return false;
            }
           let mut next_b = board.clone();
           moves &= !next_move;
           next_b.make_move(next_move);
           let (_, mut score) = SimpleSearchAI::search(&mut next_b, depth - 1, -beta, -alpha, 1, quiet);
           move_sequential += 1;
           score = -score;
           if score > alpha {
               alpha = score;
               result_move = next_move_sf;
           }

           if alpha >= beta {
               return false;
           }
           return true;
        });
        BitBoard::iterate_moves(moves, &mut |next_move: u128, next_move_sf: i64| {
            let mut next_b = board.clone();
            next_b.make_move(next_move);
            unsafe {
            thread_vec.push(thread::spawn(move || {
                SimpleSearchAI::search(&mut next_b, depth - 1, -beta, -alpha, 1, quiet)
            }));}
            move_vec.push(next_move_sf);
            return true;
        });
        for i in 0..thread_vec.len() {
            let join_handle = thread_vec.remove(0);
            let m = move_vec[i];
            let (_, mut score) = join_handle.join().expect("oh nooo my thread");
            score = -score;
            if (score > alpha) {
                result_move = m;
                alpha = score;
            }
        }
        return (result_move, alpha);
    }

    fn search(board: &mut BitBoard, depth: usize, 
                  _alpha: i32, beta: i32, depth_so_far: usize, quiet: bool) -> (i64, i32) {
        let mut alpha = _alpha;
        if depth == 0 {
            return (-1, (SimpleSearchAI::abriand_eval_1())(board, board.to_move, depth_so_far));
        }
        let moves = board.get_moves();
        if moves == 0 {
            return (-1, (SimpleSearchAI::abriand_eval_1())(board, board.to_move, depth_so_far));
            /*if depth % 2 == 0 {
                return (-1, (self.eval)(board, self.me));
            } else {
                return (-1, -(self.eval)(board, self.me));
            }*/
        }
        let mut result_move = -1;
        BitBoard::iterate_moves(moves, &mut |next_move: u128, next_move_sf: i64| {
           let mut next_b = board.clone();
           let mut score;
           if next_b.make_move(next_move) && depth == 1 && quiet {
             score = SimpleSearchAI::search(&mut next_b, 1, -beta, -alpha, depth_so_far + 1, quiet).1;
           } else {
             score = SimpleSearchAI::search(&mut next_b, depth - 1, -beta, -alpha, depth_so_far + 1, quiet).1;
           }
           score = -score;
           if score > alpha {
               alpha = score;
               result_move = next_move_sf;
           }

           if alpha >= beta {
               return false;
           }
           return true;
        });
        return (result_move, alpha);
    }

    /*fn branching_mc(board: &mut BitBoard, branching: u8, me: i8) -> i32 {
        if board.get_winner() == me {
            return 1;
        } else if board.get_winner() == -me {
            return -1;
        } else if board.get_winner() == -2 {
            return 0;
        }
        let mut result = 0;
        BitBoard::iterate_moves(board.get_moves(), &mut |m: u128, _sf: i64| {
            if rand::random::<u8>() < branching {
                let mut n_b = board.clone();
                n_b.make_move(m);
                result += SimpleSearchAI::branching_mc(&mut n_b, branching, me);
            }
            return true;
        });
        return result;
    }*/

    /*pub fn ab_then_mc(games: u64) -> Box<dyn Fn(&mut BitBoard, i8) -> i32> {
        Box::new(move |_board: &mut BitBoard, me: i8| -> i32 {
              if _board.get_winner() == me {
                 return 50000;
              } else if _board.get_winner() == -me {
                 return -50000;
              } else if _board.get_winner() == -2 {
                  return 0;
              }
              let mut result = 0;
              for _i in 0..games {
                  let mut new_board = _board.clone();
                  while new_board.get_winner() == 0 {
                      new_board.make_move(BitBoard::random_move(new_board.get_moves()));
                  } 
                  if new_board.get_winner() == me {
                      result += 1;
                  } else if new_board.get_winner() == -me {
                      result -= 1;
                  }
              }
              return result;
        })
    }*/



    pub fn abriand_eval_1() -> Box<dyn Fn(&mut BitBoard, i8, usize) -> i32> {
        Box::new(move |board: &mut BitBoard, me: i8, depth: usize| -> i32 {
              if board.get_winner() == me {
                 return 50000 - (depth as i32);
              } else if board.get_winner() == -me {
                 return -50000 + (depth as i32);
              } else if board.get_winner() == -2 {
                  if (popcnt(((board.o_occupancy >> 81) & 0x1FF) as u16)) < (popcnt(((board.x_occupancy >> 81) & 0x1FF) as u16)) {
                      return (me as i32) * 50000;
                  } else {
                      return -(me as i32) * 50000;
                  }
              }
              let mut result : i32 = 0;
             // result += (me as i32) * 1000 * (popcnt(((board.x_occupancy >> 81) & 0x1FF) as u16) as i32);
             // result -= (me as i32) * 1000 * (popcnt(((board.o_occupancy >> 81) & 0x1FF) as u16) as i32);
              result += (me as i32) * 1000 * (popcnt(((board.x_occupancy >> 81) & 0x155) as u16) as i32);
              result -= (me as i32) * 1000 * (popcnt(((board.o_occupancy >> 81) & 0x155) as u16) as i32);
              result += (me as i32) * 750 * (popcnt(((board.x_occupancy >> 81) & 0xAA) as u16) as i32);
              result -= (me as i32) * 750 * (popcnt(((board.o_occupancy >> 81) & 0xAA) as u16) as i32);
              result += (me as i32) * 500 * ((((board.x_occupancy >> 81) & 0x10) >> 4) as u16) as i32;
              result -= (me as i32) * 500 * ((((board.o_occupancy >> 81) & 0x10) >> 4) as u16) as i32;
              let x_table_occupancy = ((board.x_occupancy >> 81) & 0x1FF) | ((board.o_occupancy >> 72) & (0x1FF << 9));
              if (PARTIAL_CREDIT[x_table_occupancy as usize/64] & (1 << (x_table_occupancy % 64))) != 0 {
                  result += (me as i32) * 500;
              }
              let o_table_occupancy = ((board.o_occupancy >> 81) & 0x1FF) | ((board.x_occupancy >> 72) & (0x1FF << 9));
              if (PARTIAL_CREDIT[o_table_occupancy as usize/64] & (1 << (o_table_occupancy % 64))) != 0 {
                  result -= (me as i32) * 500;
              }
              let mut x_occup_filtered = board.x_occupancy & ((1 << 81) - 1);
              for i in 0..9 {
                  if (board.x_occupancy & (1 << (81 + i))) != 0 || (board.o_occupancy & (1 << (81 + i))) != 0 {
                      x_occup_filtered &= !(0x1FF << (9*i));
                  }
              }
              result += (me as i32) * (x_occup_filtered.count_ones() as i32) * 200;

              let mut o_occup_filtered = board.o_occupancy & ((1 << 81) - 1);
              for i in 0..9 {
                  if (board.o_occupancy & (1 << (81 + i))) != 0 || (board.x_occupancy & (1 << (81 + i))) != 0 {
                      o_occup_filtered &= !(0x1FF << (9*i));
                  }
              }
              result -= (me as i32) * ((o_occup_filtered).count_ones() as i32) * 200;
              
              /*for i in [4, 13, 22, 31, 40, 49, 58, 67, 76].iter() {
                  if board.x_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result += (me as i32) * 10;
                  } else if board.o_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result -= (me as i32) * 10;
                  }
              }
              for i in [0, 2, 9, 11, 18, 20, 6, 8, 15, 17, 24, 26, 33, 35, 42, 44, 51, 53, 27, 29, 36, 38, 45, 47, 54, 56, 63, 65, 72, 74, 60, 62, 69, 71, 78, 80].iter() {
                  if board.x_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result += (me as i32) * 7;
                  } else if board.o_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result -= (me as i32) * 7;
                  }
              }*/

             /* let mut partial_credit_o = 0;
              let mut partial_credit_x = 0;

              for i in 0..9 {
              let x_table_occupancy = ((board.x_occupancy >> 9*i) & 0x1FF) | (((board.o_occupancy >> 9*i) << 9) & (0x1FF << 9));
              if (PARTIAL_CREDIT[x_table_occupancy as usize/64] & (1 << (x_table_occupancy % 64))) != 0 {
                  //result += (me as i32) * 600;
                  partial_credit_x |= 1 << i;
              }
              let o_table_occupancy = ((board.o_occupancy >> 9*i) & 0x1FF) | (((board.x_occupancy >> 9*i) << 9) & (0x1FF << 9));
              if (PARTIAL_CREDIT[o_table_occupancy as usize/64] & (1 << (o_table_occupancy % 64))) != 0 {
                  //result -= (me as i32) * 600;
                  partial_credit_o |= 1 << i;
              }
              }*/
             /* let _partial_credit_x = partial_credit_x | (partial_credit_o << 9);
              let _partial_credit_o = partial_credit_o | (partial_credit_x << 9);
              if (PARTIAL_CREDIT[_partial_credit_x as usize/64] & (1 << (_partial_credit_x % 64))) != 0 {
                  result += (me as i32) * 500;
              }
              if (PARTIAL_CREDIT[_partial_credit_o as usize/64] & (1 << (_partial_credit_o % 64))) != 0 {
                  result -= (me as i32) * 500;
              }
               if (WIN_TABLE[partial_credit_x as usize/64] & (1 << (partial_credit_x % 64))) != 0 {
                  result += (me as i32) * 1000;
              }
              if (WIN_TABLE[partial_credit_o as usize/64] & (1 << (partial_credit_o % 64))) != 0 {
                  result -= (me as i32) * 1000;
              }*/
              //result -= (me as i32) * 1000 * (popcnt(((board.o_occupancy >> 81) & 0x10) as u16) as i32);
             /* if board.x_occupancy & ((1 as u128) << (81 + 4)) != 0 {
                  result += (me as i32) * 1000;
              } else if board.o_occupancy & ((1 as u128) << (81 + 4)) != 0 {
                  result -= (me as i32) * 1000;
              }*/
          /*  if board.x_occupancy & ((1 as u128) << (81 + 4)) != 0 {
                  result += (me as i32) * 1000;
              } else if board.o_occupancy & ((1 as u128) << (81 + 4)) != 0 {
                  result -= (me as i32) * 1000;
              }
              
              for i in [4, 13, 22, 31, 40, 49, 58, 67, 76].iter() {
                  if board.x_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result += (me as i32) * 100;
                  } else if board.o_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result -= (me as i32) * 100;
                  }
              }*/
              
             /*for i in [4, 13, 22, 31, 40, 49, 58, 67, 76].iter() {
                  if board.x_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result += (me as i32) * 100;
                  } else if board.o_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result -= (me as i32) * 100;
                  }
              }*/
              return result + ((rand::random::<i32>() % 50) - 25);
        })
    }

    fn num_occupied_x(board: &mut BitBoard, cells: Vec<i32>) -> u32 {
        let mut r = 0;
        for i in cells.iter() {
            if board.x_occupancy & ((1 as u128) << i) != 0 {
                r += 1;
            }
        }
        return r;
    }

    fn num_occupied_o(board: &mut BitBoard, cells: Vec<i32>) -> u32 {
        let mut r = 0;
        for i in cells.iter() {
            if board.o_occupancy & ((1 as u128) << i) != 0 {
                r += 1;
            }
        }
        return r;
    }
}