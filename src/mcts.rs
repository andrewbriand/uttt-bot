
use crate::ai::AI;
use crate::bitboard::BitBoard;
//use crate::SimpleSearchAI;

use std::time::{Duration, Instant};
use std::collections::HashMap;

use rand;

static PARTIAL_CREDIT: [u64; 4096] = [
0xfffffffffffffff8,
0xfffffffffffffffa,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffffa,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffcc,
0xffffffffffffffff,
0xffffffffffffffaa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffffaa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xfffffffffefef8f8,
0xfffffffffffff8f8,
0xfffffffffbfbfcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffcfcf0f0,
0xfffffffffffff0f0,
0xfffffffff3f3fcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffffff0f0,
0xfffffffffafaf0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffffffffff,
0xffffffffddddaaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0xffffffffffffffff,
0xffffffffcccc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffffffffff,
0x5555aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5555aaaa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffaf8faf8,
0xfffffffffdfafdfa,
0xfffffffffaf8faf8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffaf0faf0,
0xfffffffff5faf5fa,
0xfffffffffaf0faf0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffefeea68,
0xffffffffffeffdfa,
0xfffffffffbfbeeec,
0xffffffffffffffff,
0xfffffffffffdeaea,
0xffffffffffffffff,
0xffffffffffffffff,
0x7ffffffe,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0xffffffffffffffff,
0xfffffffffcfc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3f3ffcfc,
0xfffffffffafaaa00,
0xffffffffffaff5fa,
0xfffffffffafaaa00,
0xffffffffffffffff,
0xfffffffffff5aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5ffffffa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xffffffffffffffff,
0xfffffffff0f00000,
0xffffffffffffffff,
0xffffffffffffffff,
0xf0ff0f0,
0xffffffffeeeeaa00,
0xffffffffffee55aa,
0xffffffffbbbbeecc,
0xffffffffffffffff,
0xffffffffffddaaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x77ffffee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0xffffffffffffffff,
0xffffffffcccc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3333cccc,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffaaaaaa00,
0xffffffffffffffff,
0xffffffffff55aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x55ffffaa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffefe6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0xffffffffffffffff,
0xfffffffffdfdeaea,
0xffffffffffffffff,
0xffffffffffffffff,
0x7f7ffefe,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0xffffffffffffffff,
0xfffffffffcfc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3f3ffcfc,
0xfffffffffafa0000,
0xffffffffafaff0f0,
0xfffffffffafa0000,
0xffffffffffffffff,
0xfffffffff5f5aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5f5ffafa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xffffffffffffffff,
0xfffffffff0f00000,
0xffffffffffffffff,
0xffffffffffffffff,
0xf0ff0f0,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffffffffff,
0xffffffffddddaaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0xffffffffffffffff,
0xffffffffcccc0000,
0xffffffffffffffff,
0xffffffffffffffff,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffffffffff,
0x5555aaaa,
0xffffffffffffffff,
0xffffffffffffffff,
0x5555aaaa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0xffffffffffffffff,
0xffffffffea68ea68,
0xffffffffffffffff,
0xffffffffffffffff,
0x7dea7dea,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffaa00aa00,
0xffffffffffffffff,
0xffffffffffffffff,
0x55aa55aa,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x68686868,
0x68686868,
0x68686868,
0xffffffffffffffff,
0x68686868,
0xffffffffffffffff,
0xffffffffffffffff,
0x68686868,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffffff,
0x0,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xfffffffffffffffc,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffffc,
0xfffffffffffffffc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffee,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffefef8f8,
0xfffffffffefef8f8,
0xfffffffffbfbfcfc,
0xfffffffffbfbfcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffcfcf0f0,
0xfffffffffcfcf0f0,
0xfffffffff3f3fcfc,
0xfffffffff3f3fcfc,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffbbbbcccc,
0xffffffffddddaaaa,
0xffffffffddddaaaa,
0x7777eeee,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee6868,
0xffffffffeeee6868,
0xfffffffffbfbecec,
0xfffffffffbfbecec,
0xfffffffffdfdeaea,
0xfffffffffdfdeaea,
0x7f7feeee,
0x7f7feeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffbbbbcccc,
0xffffffffddddaaaa,
0xffffffffddddaaaa,
0x7777eeee,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee6868,
0xffffffffeeee6868,
0xfffffffffbfbecec,
0xfffffffffbfbecec,
0xfffffffffdfdeaea,
0xfffffffffdfdeaea,
0x7f7feeee,
0x7f7feeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeeee0000,
0xffffffffeeee0000,
0xffffffffbbbbcccc,
0xffffffffbbbbcccc,
0xffffffffddddaaaa,
0xffffffffddddaaaa,
0x7777eeee,
0x7777eeee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffffffff8,
0xfffffffffffffffa,
0xfffffffffffffff8,
0xfffffffffffffffa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffffa,
0xfffffffffffffff0,
0xfffffffffffffffa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffafaf8f8,
0xfffffffffffff8f8,
0xfffffffffafaf8f8,
0xfffffffffffff8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffffff0f0,
0xfffffffffafaf0f0,
0xfffffffffffff0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xfffffffff0f0f0f0,
0xfffffffffffff0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffaf8faf8,
0xfffffffffdfafdfa,
0xfffffffffaf8faf8,
0xfffffffffdfafdfa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffaf0faf0,
0xfffffffff5faf5fa,
0xfffffffffaf0faf0,
0xfffffffff5faf5fa,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffafaea68,
0xffffffffffeffdfa,
0xfffffffffafaea68,
0xffffffffffeffdfa,
0xfffffffffffdeaea,
0x7ffffffa,
0xfffffffffffdeaea,
0x7ffffffa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffffafaaa00,
0xffffffffffaff5fa,
0xfffffffffafaaa00,
0xffffffffffaff5fa,
0xfffffffffff5aaaa,
0x5ffffffa,
0xfffffffffff5aaaa,
0x5ffffffa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffff55aaaa,
0x55ffffaa,
0xffffffffff55aaaa,
0x55ffffaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffaaaaaa00,
0xffffffffffaa55aa,
0xffffffffff55aaaa,
0x55ffffaa,
0xffffffffff55aaaa,
0x55ffffaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffafa6868,
0xffffffffefeff8f8,
0xfffffffffafa6868,
0xffffffffefeff8f8,
0xfffffffffdfdeaea,
0x7f7ffafa,
0xfffffffffdfdeaea,
0x7f7ffafa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffffafa0000,
0xffffffffafaff0f0,
0xfffffffffafa0000,
0xffffffffafaff0f0,
0xfffffffff5f5aaaa,
0x5f5ffafa,
0xfffffffff5f5aaaa,
0x5f5ffafa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xfffffffffffffff8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xfffffffffffffff0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffafaf8f8,
0xfffffffffafaf8f8,
0xfffffffffafaf8f8,
0xfffffffffafaf8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xfffffffffafaf0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xfffffffff8f8f8f8,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xfffffffff0f0f0f0,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0xffffffffffffffff,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0xffffffffeaea6868,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x7d7deaea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0xffffffffaaaa0000,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x5555aaaa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffffec,
0xfffffffffffffffe,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffffec,
0xfffffffffffffffe,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffffcc,
0xfffffffffffffffc,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffffcc,
0xfffffffffffffffc,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffcc,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffffcc,
0xffffffffffffffee,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffefcea68,
0xffffffffffeffdfa,
0xfffffffffbfbeeec,
0x7ffffdfe,
0xfffffffffefcea68,
0xffffffffffeffdfa,
0xfffffffffbfbeeec,
0x7ffffdfe,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffeeccaa00,
0xffffffffddee55aa,
0xffffffffbb33eecc,
0x77bbddee,
0xffffffffeeccaa00,
0xffffffffddee55aa,
0xffffffffbb33eecc,
0x77bbddee,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc6868,
0xffffffffefeff8f8,
0xfffffffffbfbecec,
0x7f7ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffffcfc0000,
0xffffffffcfcff0f0,
0xfffffffff3f3cccc,
0x3f3ffcfc,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffffec,
0xffffffffffffffec,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffffec,
0xffffffffffffffec,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffcc,
0xffffffffffffffcc,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffecec6868,
0xffffffffecec6868,
0x7b7becec,
0x7b7becec,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0xffffffffcccc0000,
0xffffffffcccc0000,
0x3333cccc,
0x3333cccc,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff68,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffffa,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xfffffffffffffff0,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffffaa,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffffaf8ea68,
0x7feffdfa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffffaf0aa00,
0x5faff5fa,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff8f86868,
0x6f6ff8f8,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0xfffffffff0f00000,
0xf0ff0f0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0xffffffffea68ea68,
0x7dea7dea,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0xffffffffaa00aa00,
0x55aa55aa,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff68,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0xffffffffffffff00,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x68686868,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
0x0,
];

pub struct MCTSAI {
    board: BitBoard,
    me: i8,
    exploration: f64,
    //exploration: u16,
}

#[derive(Clone)]
struct TreeNode {
    pub board: BitBoard,
    //pub children: HashMap<u64, TreeNode>,
    pub children: Vec<TreeNode>,
    pub sim_count: u64,
    pub avg_reward: f64,
    pub visited: bool,
}

impl TreeNode {
    pub fn new(_board: BitBoard) -> TreeNode {
        TreeNode {
            board: _board,
            children: Vec::with_capacity(81),
            sim_count: 0,
            avg_reward: 0.0,
            visited: false,
        }
    }
}

static rollouts_per_sim: u32 = 10;

impl AI for MCTSAI {
    fn get_move(&mut self, x_time: Duration, o_time: Duration) -> i64 {
        self.me = self.board.to_move;
        let mut time_remaining = Duration::from_millis(92);
        let before = Instant::now();
        let mut tree = TreeNode::new(self.board.clone());
        let mut num_rollouts = 0;
        loop {
          for _i in 0..10 {
              self.rollout(&mut tree);
          }
          num_rollouts += 10 * rollouts_per_sim;
          let duration = Instant::now() - before;
          if duration > time_remaining {
              break;
          }
        }
        let mut best_count = 0;
        let mut best_move = 82;
        let mut best_reward = -1.0;
        let mut index = 0;
        BitBoard::iterate_moves(tree.board.get_moves(), &mut |m: u128, _sf: i64| {
            let node = &tree.children[index];
            let m = _sf;
            if node.sim_count > best_count {
                best_count = node.sim_count;
                best_move = m;
                best_reward = node.avg_reward;
            }
            index += 1;
            return true;
        });
        eprintln!("num_rollouts: {}", num_rollouts);
        eprintln!("best_reward: {}", best_reward);
        eprintln!("best_count: {}", best_count);
        self.board.make_move(1 << best_move);

        return best_move as i64;
    }

    fn make_move(&mut self, m: i64) {
        self.board.make_move(1 << m);
    }

    fn cleanup(&mut self) {

    }
}

impl MCTSAI {
    pub fn new(_exploration: f64) -> MCTSAI {
        MCTSAI {
            //exploration: ((1.0 - epsilon) * (std::u16::MAX as f64)) as u16,
            exploration: _exploration,
            board: BitBoard::new(),
            me: 1,
        }
    }

    fn eval(board: &mut BitBoard, me: i8) -> f64 {

              if board.get_winner() == me {
                 return 1.0;
              } else if board.get_winner() == -me {
                 return 0.0;
              }
              let mut result : f64 = 0.5;
              // result += (me as i32) * 1000 * (popcnt(((board.x_occupancy >> 81) & 0x1FF) as u16) as i32);
              // result -= (me as i32) * 1000 * (popcnt(((board.o_occupancy >> 81) & 0x1FF) as u16) as i32);
               result += (me as f64) * 0.055 * (((board.x_occupancy >> 81) & 0x155).count_ones() as f64); // Corners
               result -= (me as f64) * 0.055 * (((board.o_occupancy >> 81) & 0x155).count_ones() as f64);
               result += (me as f64) * 0.04 * (((board.x_occupancy >> 81) & 0xAA).count_ones() as f64); // Edges
               result -= (me as f64) * 0.04 * (((board.o_occupancy >> 81) & 0xAA).count_ones() as f64);
               result += (me as f64) * 0.027 * ((((board.x_occupancy >> 81) & 0x10) >> 4) as u16) as f64; // Center
               result -= (me as f64) * 0.027 * ((((board.o_occupancy >> 81) & 0x10) >> 4) as u16) as f64;
               let x_table_occupancy = ((board.x_occupancy >> 81) & 0x1FF) | ((board.o_occupancy >> 72) & (0x1FF << 9));
               if (PARTIAL_CREDIT[x_table_occupancy as usize/64] & (1 << (x_table_occupancy % 64))) != 0 {
                   result += (me as f64) * 0.01;
               }
               let o_table_occupancy = ((board.o_occupancy >> 81) & 0x1FF) | ((board.x_occupancy >> 72) & (0x1FF << 9));
               if (PARTIAL_CREDIT[o_table_occupancy as usize/64] & (1 << (o_table_occupancy % 64))) != 0 {
                   result -= (me as f64) * 0.01;
               }
               let mut x_occup_filtered = board.x_occupancy & ((1 << 81) - 1);
               for i in 0..9 {
                   if (board.x_occupancy & (1 << (81 + i))) != 0 || (board.o_occupancy & (1 << (81 + i))) != 0 {
                       x_occup_filtered &= !(0x1FF << (9*i));
                   }
               }
               result += (me as f64) * (x_occup_filtered.count_ones() as f64) * 0.003;
 
               let mut o_occup_filtered = board.o_occupancy & ((1 << 81) - 1);
               for i in 0..9 {
                   if (board.o_occupancy & (1 << (81 + i))) != 0 || (board.x_occupancy & (1 << (81 + i))) != 0 {
                       o_occup_filtered &= !(0x1FF << (9*i));
                   }
               }
               result -= (me as f64) * ((o_occup_filtered).count_ones() as f64) * 0.003;
              /*let mut result : f64 = 0.5;
              for i in 0..9 {
                  if board.x_occupancy & ((1 as u128) << (81 + i)) != 0 {
                      result += (me as f64) * 0.09;
                  } else if board.o_occupancy & ((1 as u128) << (81 + i)) != 0 {
                      result -= (me as f64) * 0.09;
                  }
              }
              if board.x_occupancy & ((1 as u128) << (81 + 4)) != 0 {
                  result += (me as f64) * 0.04;
              } else if board.o_occupancy & ((1 as u128) << (81 + 4)) != 0 {
                  result -= (me as f64) * 0.04;
              }
              
              for i in [4, 13, 22, 31, 40, 49, 58, 67, 76].iter() {
                  if board.x_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result += (me as f64) * 0.009;
                  } else if board.o_occupancy & ((1 as u128) << i) != 0 as u128 {
                      result -= (me as f64) * 0.009;
                  }
              }
              return result;*/
              return result;
    }

    pub fn rollout(&self, node: &mut TreeNode) -> f64 {
        let mut reward: f64 = 0.0;
        // Is the game ended?
        if node.board.get_winner() != 0 {
            node.sim_count += 1;
            if node.board.get_winner() == self.me {
                return rollouts_per_sim as f64;
            } else if node.board.get_winner() == -self.me {
                return 0.0;
            }
            return 0.0 * (rollouts_per_sim as f64);
        }

        if !node.visited {
            for _i in 0..rollouts_per_sim {
                reward += self.simulate(node.board.clone());
            }
            node.visited = true;
        } else if node.children.len() == 0 {// Is this a leaf?
            let mut moves = node.board.get_moves();
            // let board = &node.board;
            /*node.children.resize_with(moves.count_zeros() as usize, || {
              let m = (1 as u128) << (moves.trailing_zeros());
              moves &= !m;
              let mut new_board = board.clone();
              new_board.make_move(m);
              TreeNode::new(new_board)
            });*/
            while moves != 0 {
              let m = (1 as u128) << (moves.trailing_zeros());
              moves &= !m;
              let mut new_board = node.board.clone();
              new_board.make_move(m);
              let mut new_node = TreeNode::new(new_board);
              new_node.avg_reward = MCTSAI::eval(&mut new_node.board, self.me) * (rollouts_per_sim as f64);
              new_node.sim_count = 1;
              node.children.push(new_node);
            }
            /*BitBoard::iterate_moves(node.board.get_moves(), &mut |m: u128, _sf: i64| {
              let mut new_board = node.board.clone();
              new_board.make_move(m);
              let mut new_node = TreeNode::new(new_board);
              node.children.push(new_node);
              return true;
            });*/
            let rand = (rand::random::<u8>() as usize) % node.children.len();
            let mut this_node = &mut node.children[rand];
            for _i in 0..rollouts_per_sim {
                reward += self.simulate(this_node.board.clone());
            }
            this_node.avg_reward = reward;
            this_node.sim_count = 1;
            this_node.visited = true;
        } else {
            let mut move_score = -1000000000.0;
            let mut index = 0;
            for i in 0..node.children.len() {
                let n = &mut node.children[i];
                if (n.sim_count == 0) {
                    index = i;
                    break;
                }
                let score = ((node.board.to_move * self.me) as f64) *
                            (n.avg_reward) + self.exploration * ((node.sim_count as f64).log2()/(n.sim_count as f64)).sqrt();
                if score > move_score {
                    move_score = score;
                    index = i;
                }
            }
            //let mut new_node = node.children.get(&reward_move).unwrap().clone();
            let mut new_node = &mut node.children[index];
            reward = self.rollout(new_node);
        }
       /* let mut best_score = -1000000.0;
        node.sim_count += 1;
        for (m, n) in node.children.iter() {
            if n.avg_reward * (node.board.to_move as f64) * (self.me as f64) > best_score {
                best_score = n.avg_reward * (node.board.to_move as f64);
            }
        }
        node.avg_reward = best_score;*/
        node.sim_count += 1;
        node.avg_reward += ((reward - node.avg_reward) / (node.sim_count as f64));
        return reward;
    }
    
    pub fn simulate(&self, mut board: BitBoard) -> f64 {
        while board.get_winner() == 0 {
            board.make_move(BitBoard::random_move(board.get_moves()));
        }
        let winner = board.get_winner();
        if winner == self.me {
            return 1.0;
        } else if winner == -self.me {
            return 0.0;
        }
        return 0.5;
    }
}
